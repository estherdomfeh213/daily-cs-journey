### **Algorithm for Traversing a 1D Array**  

#### **Definition:**  
Traversal in an array means visiting each element **one by one** and performing an operation (e.g., printing, summing, or modifying).  

---

### **ðŸ”¹ Algorithm (Pseudocode)**
```
Algorithm TraverseArray(arr, n)
1. Start
2. For i = 0 to n-1 do
      a. Access arr[i]
      b. Perform an operation (e.g., print arr[i])
3. End For
4. Stop
```
ðŸ“Œ **`arr`** is the array, and **`n`** is the number of elements.  

---

### **ðŸ”¹ Implementation in Python**
```python
def traverse_array(arr):
    for i in range(len(arr)):  
        print(arr[i], end=" ")  # Printing each element

# Example Usage
numbers = [10, 20, 30, 40, 50]
traverse_array(numbers)
```
**ðŸ’¡ Output:**  
```
10 20 30 40 50
```

---

### **ðŸ”¹ Implementation in C**
```c
#include <stdio.h>

void traverseArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]); // Printing each element
    }
}

int main() {
    int numbers[] = {10, 20, 30, 40, 50};
    int size = sizeof(numbers) / sizeof(numbers[0]);
    traverseArray(numbers, size);
    return 0;
}
```
**ðŸ’¡ Output:**  
```
10 20 30 40 50
```

---

### **ðŸ”¹ Time Complexity**  
âœ… **Best Case:** `O(n)` (We visit each element once).  
âœ… **Worst Case:** `O(n)` (Same as best case since we must visit all elements).  

---



### **Algorithm for Insertion in a 1D Array**

#### **Definition:**
Insertion in an array refers to **adding a new element** at a specified position. After insertion, the array elements after the insertion point must be **shifted** to accommodate the new element.

---

### **ðŸ”¹ Algorithm (Pseudocode)**
```
Algorithm Insertion(arr, n, index, value)
1. Start
2. If index < 0 or index > n, return "Invalid index"  // Ensure valid index
3. For i = n-1 to index do
      a. arr[i+1] = arr[i]   // Shift elements to the right
4. arr[index] = value      // Insert the new element at the specified index
5. n = n + 1               // Increase the size of the array
6. End
7. Stop
```
- **`arr`** is the array where the element is inserted.
- **`n`** is the number of elements in the array before insertion.
- **`index`** is the position where the new element is to be inserted.
- **`value`** is the element to be inserted.

---

### **ðŸ”¹ Insertion Example in Python**
```python
def insert_element(arr, index, value):
    n = len(arr)
    
    # Shift elements to the right
    arr.append(0)  # Expand the array by one element (to accommodate new element)
    for i in range(n-1, index-1, -1):
        arr[i+1] = arr[i]
    
    arr[index] = value  # Insert the new element at the specified index

# Example Usage
numbers = [10, 20, 30, 40, 50]
insert_element(numbers, 2, 25)  # Insert 25 at index 2
print(numbers)
```
**ðŸ’¡ Output:**
```
[10, 20, 25, 30, 40, 50]
```

---

### **ðŸ”¹ Insertion Example in C**
```c
#include <stdio.h>

void insertElement(int arr[], int *n, int index, int value) {
    for (int i = *n - 1; i >= index; i--) {
        arr[i+1] = arr[i];  // Shift elements to the right
    }
    arr[index] = value;  // Insert the new element at the specified index
    (*n)++;  // Increase the size of the array
}

int main() {
    int numbers[6] = {10, 20, 30, 40, 50};  // Array with 5 elements
    int size = 5;
    
    insertElement(numbers, &size, 2, 25);  // Insert 25 at index 2

    for (int i = 0; i < size; i++) {
        printf("%d ", numbers[i]);
    }
    return 0;
}
```
**ðŸ’¡ Output:**
```
10 20 25 30 40 50
```

---

### **ðŸ”¹ Time Complexity**  
âœ… **Best Case:** `O(n)` (Shifting all elements after the insertion index).  
âœ… **Worst Case:** `O(n)` (Same as the best case, as we may have to shift multiple elements in large arrays).  

---

### **ðŸ”¹ Key Considerations**  
- If you insert at the **beginning**, all elements need to be shifted.
- If you insert at the **end**, there's no need to shift, but you still need to ensure the array has space.

---



### **Algorithm for Deletion in a 1D Array**

#### **Definition:**
Deletion in an array refers to **removing an element** from a specified position. After deletion, the array elements after the deleted element must be **shifted** to fill the gap left by the deleted element.

---

### **ðŸ”¹ Algorithm (Pseudocode)**
```
Algorithm Deletion(arr, n, index)
1. Start
2. If index < 0 or index >= n, return "Invalid index"  // Ensure valid index
3. For i = index to n-2 do
      a. arr[i] = arr[i+1]   // Shift elements to the left
4. n = n - 1               // Decrease the size of the array
5. End
6. Stop
```
- **`arr`** is the array from which the element is deleted.
- **`n`** is the number of elements in the array before deletion.
- **`index`** is the position of the element to be deleted.

---

### **ðŸ”¹ Deletion Example in Python**
```python
def delete_element(arr, index):
    n = len(arr)
    
    # Check if the index is valid
    if index < 0 or index >= n:
        print("Invalid index")
        return
    
    # Shift elements to the left
    for i in range(index, n-1):
        arr[i] = arr[i+1]
    
    arr.pop()  # Remove the last element to shrink the array

# Example Usage
numbers = [10, 20, 30, 40, 50]
delete_element(numbers, 2)  # Delete the element at index 2
print(numbers)
```
**ðŸ’¡ Output:**
```
[10, 20, 40, 50]
```

---

### **ðŸ”¹ Deletion Example in C**
```c
#include <stdio.h>

void deleteElement(int arr[], int *n, int index) {
    if (index < 0 || index >= *n) {
        printf("Invalid index\n");
        return;
    }

    // Shift elements to the left
    for (int i = index; i < *n - 1; i++) {
        arr[i] = arr[i+1];
    }
    (*n)--;  // Decrease the size of the array
}

int main() {
    int numbers[5] = {10, 20, 30, 40, 50};
    int size = 5;
    
    deleteElement(numbers, &size, 2);  // Delete the element at index 2

    for (int i = 0; i < size; i++) {
        printf("%d ", numbers[i]);
    }
    return 0;
}
```
**ðŸ’¡ Output:**
```
10 20 40 50
```

---

### **ðŸ”¹ Time Complexity**  
âœ… **Best Case:** `O(n)` (Shifting all elements after the deleted index).  
âœ… **Worst Case:** `O(n)` (Same as the best case, as we have to shift multiple elements).

---

### **ðŸ”¹ Key Considerations**  
- If you delete at the **beginning**, you need to shift all the elements to the left.
- If you delete at the **end**, there's no shifting required, but the size of the array still needs to be updated.

---


## Search algorithm 

Algorithm  for Linear search 
Algorithm LinearSearch(arr, n, target)
1. Start
2. For i = 0 to n-1 do
      a. If arr[i] == target, return i  // Element found at index i
3. Return -1  // Element not found
4. End
5. Stop


Example Implementation in Python 

def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i  # Element found at index i
    return -1  # Element not found

# Example Usage
numbers = [10, 20, 30, 40, 50]
index = linear_search(numbers, 30)  # Searching for 30
print("Element found at index:", index)



ðŸ”¹ Bubble Sort
Overview:
Bubble Sort is one of the simplest sorting algorithms. It repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The process is repeated until the list is sorted.

ðŸ”¹ Algorithm for Bubble Sort
vbnet
Copy
Edit
Algorithm BubbleSort(arr, n)
1. Start
2. For i = 0 to n-1 do
    a. For j = 0 to n-i-1 do
        i. If arr[j] > arr[j+1], swap arr[j] and arr[j+1]
3. End
4. Stop